#+TITLE: CSS for Org-exported HTML
#+OPTIONS: toc:nil num:4 H:4 ^:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/normalize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style.css"/>
#+MACRO: TeX @@html:<span class="tex">T<sub>e</sub>X</span>@@
#+MACRO: LaTeX @@html:<span class="latex">L<sup>a</sup>T<sub>e</sub>X</span>@@
#+MACRO: kbd @@html:<kbd>$1</kbd>@@

-----

#+BEGIN_ABSTRACT
This article shows off my org.css, a simple and clean stylesheet for
org-exported HTML file.  My org template for blogging is also
provided.  The configuration of blogging with org mode is omitted for
brevity.
#+END_ABSTRACT

#+TOC: headlines 3

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: sec:introduction
  :END:

  #+BEGIN_QUOTE
  [[http://orgmode.org/][Org mode]] is for keeping notes[fn:1], maintaining TODO lists, planning
  projects, and authoring documents with a fast and effective
  /plain-text/ system[fn:2] \cite{orgmode}.
  #+END_QUOTE

  Org mode is a built-in major mode in [[http://www.gnu.org/software/emacs/][Emacs]].  It's similar to
  [[http://daringfireball.net/projects/markdown/syntax][markdown]] where all editing is done in plain text with some character
  markups to decorate texts and finally the text file can be compiled
  or exported to some other formats.  The philosophy is that we can
  concentrate on the contents with as few distraction from the styles
  as possible, i.e., as easy-to-read and easy-to-write as is feasible
  \cite{markdown}.  However, markdown is just a markup language for
  web writers, while org mode provides much richer functionality
  beyond simple text markup.  For a full introduction to org mode,
  please refer to [[http://orgmode.org/][orgmode.org]] or Emacs manual.  In this article, we
  focus on one of its uses, /exporting to html/.

  I will assume that readers are already familiar with Emacs and org
  mode.  In Section [[#sec:moti]] I provide the motivation for this short
  demo.  All related configuration and templates are detailed in
  Section [[#sec:setup]].  And finally Section [[#sec:con]] concludes this
  article.

* Motivation
  :PROPERTIES:
  :CUSTOM_ID: sec:motivation
  :END:

  As a heavy Emacs user, [[https://www.google.com/search?q%3Dblogging%2Bwith%2Borg%2Bmode][blogging with org mode]] is a natural choice.
  Since I'm keeping notes and ideas in org mode, and some of them I
  may want to publish online.  Questions like why not use products
  like MS OneNote or Google Keep or Wordpress or whatever simply boil
  down to personal preference.  Org file is a simple text file which
  can be processed efficiently by external programs.  It has good
  built-in support from Emacs, and can be exported to various formats,
  including /tex/, /pdf/ and /html/.  Except for some special cases
  where dedicated styles are needed, say academic papers, the default
  export styles with simple tweaks usually satisfy my needs.  However,
  the default style provided by org html exporter is simple /boring/.
  So I decide to tweak the stylesheet a little bit to make it /clean/,
  /simple/ and more /eye appealing/.

  Souce code of this file is available at
  https://github.com/gongzhitaao/orgcss.

* Setup
  :PROPERTIES:
  :CUSTOM_ID: sec:setup
  :END:

  Publishing with org mode can be achieved as simple as a few
  keystrokes (say {{{kbd(C-c C-e h h)}}} for html exporting and
  {{{kbd(C-c C-e l p)}}} for pdf exporting).  We omit the publishing
  configuration as the main goal of this article is to demo my
  stylesheet.  The process can be meticulously tweaked following the
  [[http://orgmode.org/manual/Publishing.html#Publishing][instruction here.]]  Actually in my current setup, no tweaks and
  special configurations are needed.  All remains default and works
  out of the box.

** External Utilities
   :PROPERTIES:
   :CUSTOM_ID: sec:external-utilities
   :END:

   Table [[tab:util]] list all the external utilities I used for
   publishing and rendering.

   #+CAPTION: Utilities
   #+NAME: tab:util
   | Utility     | Description                                     |
   |-------------+-------------------------------------------------|
   | [[https://www.lri.fr/~filliatr/bibtex2html/][bibtex2html]] | Export citations in bib files, if any, to html. |
   | [[https://www.mathjax.org/][MathJax]]     | Render math equations.                          |

   Here are some notes about the above utility.

   - Bibtex2html is optional if no citation is required.  Citation
        syntax is the same as in {{{LaTeX}}}, i.e., =\cite{key}=.  To
        use this functionality, you should include the following elisp
        code in your org configuration.

        #+BEGIN_SRC emacs-lisp
(require 'ox-bibtex)
        #+END_SRC

   - I use [[https://www.mathjax.org/][MathJax]] inline rendering for equations despite of its
        speed.  It is rumored that [[http://khan.github.io/KaTeX/][KaTeX]] loads and renders much faster
        than MathJax, but the latter supports only a subset of
        {{{LaTeX}}} syntax.  See the [[http://www.intmath.com/cg5/katex-mathjax-comparison.php][comparison]] between the two.
        Anyway, I do not have that many equations to show off.

** Org Templates
   :PROPERTIES:
   :CUSTOM_ID: sec:org-templates
   :END:

   The following is my org file template for blogging.

   #+BEGIN_SRC org
,#+TITLE: Article Title Goes Here
,#+OPTIONS: toc:nil num:t tex:dvipng
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/normalize.css"/>
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>

# Separate the title with the content
-----

,#+BEGIN_ABSTRACT
Article abstract goes here.
,#+END_ABSTRACT

# now prints out the previously disabled (toc:nil) table of contents.
,#+TOC: headlines 3

Your content goes here.

# separate the body with the footnotes and reference
-----

# prints out bibliograph, if any, with bibtex2html.  The first
# parameter is the bibliograph file name without .bib extension, the
# second is the reference style.
,#+BIBLIOGRAPHY: bib-file plain

# This is an automatically generated section is you use footnote.
,* Footnotes
  #+END_SRC

   With all these setup, only one thing is left, i.e., tweaking the
   styles of exported html.  By default, The HTML exporter assigns
   some [[http://orgmode.org/manual/CSS-support.html][special CSS classes]] to appropriate parts of the document and
   your style specifications may change these, in addition to any of
   the standard classes like for headlines, tables, etc.  The list is
   actually not complete, you may want to export a test org file and
   read the source of exported html file to find out what classes are
   available.  The current page shows off my org.css.  Some other good
   styles for org-exported html can be found on [[http://orgmode.org/]],
   [[http://doc.norang.ca/org-mode.html]] and etc.

* Known Issues
  :PROPERTIES:
  :CUSTOM_ID: sec:known-issues
  :END:

  The citation exporter, =ox-bibtex=, does NOT work seamlessly.  As of
  =Org-mode version 8.2.10=, I have the following issues.

** Bib Links
   :PROPERTIES:
   :CUSTOM_ID: sec:bib-links
   :END:

  For ref.bib, =bibtex2html= generates two files, ref.html and
  ref_bib.html.  Links in the two files are redirected to each other.
  For example, the bib link in ref_bib.html links to appropriate
  section in ref.html and key in ref.html links back to ref_bib.html.
  =ox-bibtex= ignores this and copies the content of ref.html directly
  to the exported html file.  So here comes the problem.  In the
  exported html, everything works fine but when you try to go and see
  the bib source of a citation, you will be directed to ref_bib.html,
  and then when you try to get back from ref_bib.html by the key, you
  get directed to ref.html instead of the generated
  document. Currently there is no elegant solution yet except hacking
  some code to post-process the generated document.

** Dangling Element
   :PROPERTIES:
   :CUSTOM_ID: sec:dangling-element
   :END:
   The lisp function =insert-file-contents= used in =ox-bibtex= does
   not move point and insertion-marker to the end of inserted text
   (I'm not sure it is a bug or an intention).  The result is that the
   citation is a dangling table not included in the bibliography div.

   The expected result is

   #+BEGIN_SRC html
<div id="bibliography">
  <h2>Bibliography</h2>
  <table>
  <!-- Citation content goes here -->
  </table>
</div>
   #+END_SRC

   But we got

   #+BEGIN_SRC html
<div id="bibliography">
  <h2>Bibliography</h2>
</div>
<table>
<!-- Citation content goes here -->
</table>
   #+END_SRC

   Unless a patch is submitted, we may need to manually adjust this
   weird result.

** Bibliography in Wrong Section
   :PROPERTIES:
   :CUSTOM_ID: sec:bibliograph-in-wrong-section
   :END:

   The exported bibliography is always included in some other section
   div instead of a stand-lone section.

   The expected result is

   #+BEGIN_SRC html
<div id="outline-container-1" class="outline-2">
<!-- section 1 -->
<div>
<div id="outline-container-2" class="outline-2">
<!-- section 2 -->
<div>
<div id="outline-container-3" class="outline-2">
<!-- section 3 -->
<div>
<div id="bibliography">
<!-- bibliography goes here -->
<div>
   #+END_SRC

   But we got

   #+BEGIN_SRC html
<div id="outline-container-1" class="outline-2">
<!-- section 1 -->
<div>
<div id="outline-container-2" class="outline-2">
<!-- section 2 -->
<div>
<div id="outline-container-3" class="outline-2">
<!-- section 3 -->
  <div id="bibliography">
  <!-- bibliography goes here -->
  <div>
<div>
   #+END_SRC

   The problem is that the following command

   #+BEGIN_SRC org
,#+BIBLIOGRAPHY ref plain
   #+END_SRC

   is always ignored unless it is belonged to a section.  This is due
   to the internal implementation of keyword parser of =ox-html=.
   Currently hacking some post-processing code is the only solution if
   you do not want to do it manually.

** Wrong Back Reference
   :PROPERTIES:
   :CUSTOM_ID: sec:wrong-back-reference
   :END:

   The links generated by =ox-bibtex= is also troublesome.  Given
   =ref.bib=, =bibtex2html= will generate two files, =reb_bib.html=
   and =ref.html=.  The utility =ox-bibtex= directly inserts contents
   of =ref.html= to the current exported html.  Now when you click
   links in the exported html, you will be directed to =ref_bib.html=.
   And when expecting to get back to the exported html by clicking
   links in =ref_bib.html=, you will be instead directed to
   =ref.html=.  It is not a big deal, but just annoying.  I would
   use links instead of citations whenever possible.

* Conclusion
  :PROPERTIES:
  :CUSTOM_ID: sec:conclusion
  :END:

  This article essentially demonstrates my stylesheet for org-exported
  html file without going into details about the publishing process
  which requires some knowledge about Emacs and org mode.  There are
  some dangling issues around the citation with =ox-bibtex=, to which
  the simple solution is to use links instead of citations, if
  possible.  Otherwise, hacking some post-processing code is
  necessary.

-----

* Footnotes

[fn:1] For note keeping, [[http://jblevins.org/projects/deft/][Deft]] with Orgmode make a cute couple.

[fn:2] A [[http://doc.norang.ca/org-mode.html][great article]] elaborates on this.

#+BIBLIOGRAPHY: ref plain
